package model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jun 26 17:12:16 BDT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxTnaDefaultBuyerWiseEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        TbwId {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getTbwId();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setTbwId((Number)value);
            }
        }
        ,
        BuyerId {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getBuyerId();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setBuyerId((Number)value);
            }
        }
        ,
        TnaDateId {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getTnaDateId();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setTnaDateId((Number)value);
            }
        }
        ,
        DTnaDateId {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getDTnaDateId();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setDTnaDateId((Number)value);
            }
        }
        ,
        PositiveNegative {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getPositiveNegative();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setPositiveNegative((String)value);
            }
        }
        ,
        DayDifference {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getDayDifference();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setDayDifference((Number)value);
            }
        }
        ,
        XxTnaDatesEO {
            public Object get(XxTnaDefaultBuyerWiseEOImpl obj) {
                return obj.getXxTnaDatesEO();
            }

            public void put(XxTnaDefaultBuyerWiseEOImpl obj, Object value) {
                obj.setXxTnaDatesEO((XxTnaDatesEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(XxTnaDefaultBuyerWiseEOImpl object);

        public abstract void put(XxTnaDefaultBuyerWiseEOImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TBWID = AttributesEnum.TbwId.index();
    public static final int BUYERID = AttributesEnum.BuyerId.index();
    public static final int TNADATEID = AttributesEnum.TnaDateId.index();
    public static final int DTNADATEID = AttributesEnum.DTnaDateId.index();
    public static final int POSITIVENEGATIVE = AttributesEnum.PositiveNegative.index();
    public static final int DAYDIFFERENCE = AttributesEnum.DayDifference.index();
    public static final int XXTNADATESEO = AttributesEnum.XxTnaDatesEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxTnaDefaultBuyerWiseEOImpl() {
    }

    /**
     * Gets the attribute value for TbwId, using the alias name TbwId.
     * @return the TbwId
     */
    public Number getTbwId() {
        return (Number)getAttributeInternal(TBWID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TbwId.
     * @param value value to set the TbwId
     */
    public void setTbwId(Number value) {
        setAttributeInternal(TBWID, value);
    }

    /**
     * Gets the attribute value for BuyerId, using the alias name BuyerId.
     * @return the BuyerId
     */
    public Number getBuyerId() {
        return (Number)getAttributeInternal(BUYERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BuyerId.
     * @param value value to set the BuyerId
     */
    public void setBuyerId(Number value) {
        setAttributeInternal(BUYERID, value);
    }

    /**
     * Gets the attribute value for TnaDateId, using the alias name TnaDateId.
     * @return the TnaDateId
     */
    public Number getTnaDateId() {
        return (Number)getAttributeInternal(TNADATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TnaDateId.
     * @param value value to set the TnaDateId
     */
    public void setTnaDateId(Number value) {
        setAttributeInternal(TNADATEID, value);
    }

    /**
     * Gets the attribute value for DTnaDateId, using the alias name DTnaDateId.
     * @return the DTnaDateId
     */
    public Number getDTnaDateId() {
        return (Number)getAttributeInternal(DTNADATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DTnaDateId.
     * @param value value to set the DTnaDateId
     */
    public void setDTnaDateId(Number value) {
        setAttributeInternal(DTNADATEID, value);
    }

    /**
     * Gets the attribute value for PositiveNegative, using the alias name PositiveNegative.
     * @return the PositiveNegative
     */
    public String getPositiveNegative() {
        return (String)getAttributeInternal(POSITIVENEGATIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PositiveNegative.
     * @param value value to set the PositiveNegative
     */
    public void setPositiveNegative(String value) {
        setAttributeInternal(POSITIVENEGATIVE, value);
    }

    /**
     * Gets the attribute value for DayDifference, using the alias name DayDifference.
     * @return the DayDifference
     */
    public Number getDayDifference() {
        return (Number)getAttributeInternal(DAYDIFFERENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayDifference.
     * @param value value to set the DayDifference
     */
    public void setDayDifference(Number value) {
        setAttributeInternal(DAYDIFFERENCE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxTnaDatesEOImpl.
     */
    public XxTnaDatesEOImpl getXxTnaDatesEO() {
        return (XxTnaDatesEOImpl)getAttributeInternal(XXTNADATESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity XxTnaDatesEOImpl.
     */
    public void setXxTnaDatesEO(XxTnaDatesEOImpl value) {
        setAttributeInternal(XXTNADATESEO, value);
    }

    /**
     * @param tbwId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number tbwId) {
        return new Key(new Object[]{tbwId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entity.XxTnaDefaultBuyerWiseEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
        oracle.jbo.server.SequenceImpl s =
        new oracle.jbo.server.SequenceImpl("XX_TNA_DEFAULR_BUYER_WISE_S",  getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        this.setTbwId(sVal);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
